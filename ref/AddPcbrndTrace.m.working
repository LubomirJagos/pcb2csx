function CSX = AddPcbrndTrace(CSX, PCBRND, layer_number, trace_x1, trace_y1, trace_x2, trace_y2, trace_width, trace_clear)
% This function adds traces of the style used by pcb-rnd and pcb (associated with gEDA)
% CSX is the structure with the geometry being assembled
% substrate is a larger structure that includes the info on the substrate
% 
% trace_x1, trace_y1 are the x and y points for the start of the trace
% trace_x2, trace_y2 are the x and y points for the end of the trace
% trace_radius is the width of the trace
% trace_clear is the clearance of the trace
% 
% The trace is 

current = PCBRND.layer_types(PCBRND.layers(layer_number).number);

trace_xdelta = trace_x2 - trace_x1;
trace_ydelta = trace_y2 - trace_y1;

trace_radius = trace_width / 2;

trace_length = sqrt((trace_xdelta)^2 + (trace_ydelta)^2);

if (0 != trace_xdelta)
   trace_theta = atan((trace_ydelta) / (trace_xdelta));
else
   trace_theta = pi / 2;
end

% now for the polygon to be the body of the trace
trace_xy(1, 1) = trace_x1 - trace_radius * cos(pi/2 - trace_theta);trace_xy(2, 1) = trace_y1 + trace_radius * sin(pi/2 + trace_theta);
trace_xy(1, 2) = trace_x2 - trace_radius * cos(pi/2 - trace_theta);trace_xy(2, 2) = trace_y2 + trace_radius * sin(pi/2 + trace_theta);
trace_xy(1, 3) = trace_x2 + trace_radius * cos(pi/2 - trace_theta);trace_xy(2, 3) = trace_y2 - trace_radius * sin(pi/2 + trace_theta);
trace_xy(1, 4) = trace_x1 + trace_radius * cos(pi/2 - trace_theta);trace_xy(2, 4) = trace_y1 - trace_radius * sin(pi/2 + trace_theta);

% trace clearance
tracec_xy(1, 1) = trace_x1 - (trace_radius + trace_clear) * cos(pi/2 - trace_theta);tracec_xy(2, 1) = trace_y1 + (trace_radius + trace_clear) * sin(pi/2 + trace_theta);
tracec_xy(1, 2) = trace_x2 - (trace_radius + trace_clear) * cos(pi/2 - trace_theta);tracec_xy(2, 2) = trace_y2 + (trace_radius + trace_clear) * sin(pi/2 + trace_theta);
tracec_xy(1, 3) = trace_x2 + (trace_radius + trace_clear) * cos(pi/2 - trace_theta);tracec_xy(2, 3) = trace_y2 - (trace_radius + trace_clear) * sin(pi/2 + trace_theta);
tracec_xy(1, 4) = trace_x1 + (trace_radius + trace_clear) * cos(pi/2 - trace_theta);tracec_xy(2, 4) = trace_y1 - (trace_radius + trace_clear) * sin(pi/2 + trace_theta);

if (trace_x1 > trace_x2) % && trace_y1 != trace_y2)
   direction = -1;
else
   direction = 1;
end

% trace ends
tmp_xy(1, 1) = trace_xy(1, 1);
tmp_xy(2, 1) = trace_xy(2, 1);
tmp_xy(1, 2) = trace_xy(1, 4);
tmp_xy(2, 2) = trace_xy(2, 4);

CSX = AddPcbrndTraceEnds(CSX, PCBRND, current, PCBRND.prio.coppertrace, layer_number, tmp_xy, trace_theta, trace_radius, direction);

if (trace_clear > 0)
   tmp_xy(1, 1) = tracec_xy(1, 1);
   tmp_xy(2, 1) = tracec_xy(2, 1);
   tmp_xy(1, 2) = tracec_xy(1, 4);
   tmp_xy(2, 2) = tracec_xy(2, 4);
   CSX = AddPcbrndTraceEnds(CSX, PCBRND, PCBRND.void, PCBRND.prio.clearance, layer_number, tmp_xy, trace_theta, (trace_radius + trace_clear), direction);
end

tmp_xy(1, 1) = trace_xy(1, 2);
tmp_xy(2, 1) = trace_xy(2, 2);
tmp_xy(1, 2) = trace_xy(1, 3);
tmp_xy(2, 2) = trace_xy(2, 3);

direction = direction * -1;

CSX = AddPcbrndTraceEnds(CSX, PCBRND, current, PCBRND.prio.coppertrace, layer_number, tmp_xy, trace_theta, trace_radius, direction);

if (trace_clear > 0)
   tmp_xy(1, 1) = tracec_xy(1, 2);
   tmp_xy(2, 1) = tracec_xy(2, 2);
   tmp_xy(1, 2) = tracec_xy(1, 3);
   tmp_xy(2, 2) = tracec_xy(2, 3);
   CSX = AddPcbrndTraceEnds(CSX, PCBRND, PCBRND.void, PCBRND.prio.clearance, layer_number, tmp_xy, trace_theta, (trace_radius + trace_clear), direction);
end

if (2 == current.subtype)
   disp('pcb-rnd uses traces with rounded ends. openems currently has no way to do this in 2D mesh so sadly your trace has been made rectangular.');
   CSX = AddPolygon( CSX, current.name, PCBRND.prio.coppertrace, 2, PCBRND.layers(layer_number).zbottom, trace_xy, 'CoordSystem', 0);
   % eventually i will need to support isolating copper traces with something other than void matterial
   if (trace_clear > 0)
      disp('we are assuming this trace is isolated in the plane with void matterial instead of say substrate (fixme if you want more layers');
      CSX = AddPolygon( CSX, PCBRND.void.name, PCBRND.prio.clearance, 2, PCBRND.layers(layer_number).zbottom, tracec_xy, 'CoordSystem', 0);
   end
elseif (3 == current.subtype)
   disp('You put a trace on subtype 3 which is reserved for substrate. You have been warned.');
   CSX = AddLinPoly( CSX, current.name, PCBRND.prio.substrate, 2, PCBRND.layers(layer_number).zbottom, trace_xy, current.thickness, 'CoordSystem',0);
else
   disp('Ok... listen this just is not functional yet.. sorry but this is like your 2nd warning so i hope you are not sill expecting results...');
   %ok the following works but lets not role it out yet. everything needed to support it is not there yet.
   CSX = AddLinPoly(CSX, current.name, PCBRND.prio.coppertrace, 2, substrate_top_z, trace1_xy , copper_thick, 'CoordSystem',0);
   CSX = AddCylinder(CSX, current.name, PCBRND.prio.coppertrace,[trace1_x1 trace1_y1 (substrate_top_z)], [trace1_x1 trace1_y1 (substrate_top_z+copper_thick)], trace1_radius);
   CSX = AddCylinder(CSX, current.name, PCBRND.prio.coppertrace,[trace1_x2 trace1_y2 (substrate_top_z)], [trace1_x2 trace1_y2 (substrate_top_z+copper_thick)], trace1_radius);
   if (trace_clear > 0)
      CSX = AddLinPoly(CSX, PCBRND.void.name, PCBRND.prio.clearance, 2, substrate_top_z, tracec_xy , copper_thick, 'CoordSystem',0);
      CSX = AddCylinder(CSX, PCBRND.void.name, PCBRND.prio.clearance,[trace_x1 trace_y1 (substrate_top_z)], [trace_x1 trace_y1 (substrate_top_z+copper_thick)], trace_radius + trace_clear);
      CSX = AddCylinder(CSX, PCBRND.void.name, PCBRND.prio.clearance,[trace_x2 trace_y2 (substrate_top_z)], [trace_x2 trace_y2 (substrate_top_z+copper_thick)], trace_radius + trace_clear);
   end
end

